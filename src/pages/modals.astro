---
import Layout from '@layouts/Layout.astro';
import Dialog from '@components/Dialog.astro';
import Button from '@components/Button.astro';

const { 
	title = "My Astro Blog",
	description = "My musings about the Astro framework",
	...rest 
} = Astro.props;
---

<Layout {title} {description}>
  <main class="p-inline-max pt-lg bg-surface-2 stack">
    <p>Components</p>
    <h1>Dialog</h1>
  
    <p>A minimally styled window overlaid on the main content. By design the Dialog is minimal with zero content to allow for both modal and non-modal use.</p>
    
    <h2>Modal vs Dialog</h2>
    <p>The term "modal" and "dialog" are often used interchangeably, but there's an important difference. A modal window describes parts of a UI that blocks user interaction. A dialog doesn't have to be blocking.</p>

    <Button onclick="myDialog.showModal()">Open dialog</Button>
    <Button onclick="myOtherDialog.show()">Open dialog1</Button>
  
    <p><a href="https://modalzmodalzmodalz.com/">Not everyone likes modality</a> ‚Äî as a UI concept, they are very disruptive. Use the pattern sparsely, only when disrupting is very much necessary. If you want to ask the user ‚ÄúAre you sure you want to delete all that?‚Äù, go ahead and make it disruptive. If you want to promote your newsletter sign-up or advertising, the disruption is unlikely to be appreciated.</p>

    <p>In terms of implementation, you will need to make everything except your modal element inert. The <dialog> element (used with showModal()) does this for and would be the best to use.</p>
    <h2>Focus Trapping</h2>
    <p>The ability of the dialog element to be opened in a modal state and thus trap focus inside of it is a superpower of this element. It is unique to the dialog element, popovers cannot do this (on their own).</p>
    <p>Focus trapping, while it sounds kinda bad, is actually an accessibility feature. After all, that‚Äôs what a modal is: it forces you to deal with some interaction before anything else can be done. It‚Äôs actually also a WCAG requirement to not trap focus when you shouldn‚Äôt, but in the case of a modal, you should be trapping focus ‚Äî as well as providing a standard way to close the dialog and escape the trap.</p>
  
    <h2>Moving Focus</h2>
    When a dialog is opened (either modal or non-modal), focus is moved to the first focusable element within it. When it is closed, focus is moved back to the element that opened it.
    
    With a popover, focus remains on the element that opened it even after the popup is opened. However, after the popup is open, the next tab will put focus into the popup‚Äôs content if there is any in there, regardless of where it is in the DOM, tab through the focusable elements of the popup, then onto other focusable elements outside the popup after the original element that opened it.
    
    This is all tricky work that you get for free by using the <dialog> element or popups and frankly a huge reason to use them üëç.
  </main>
</Layout>

<Dialog 
  id="myDialog"
  icon="symbols-solid"
  overline="Content above the heading"
  heading="My Dialog via showModal()" 
>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. Archi tecto quae molestiae reprehenderit, nobis facere odit eos, eligendi cum saepe, qui est volupt atibus!.</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. </p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. Architecto quae molestiae reprehenderit, nobis facere odit eos, eligendi cum saepe, qui est voluptatibus!.</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. </p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. Architecto quae molestiae reprehenderit, nobis facere odit eos, eligendi cum saepe, qui est voluptatibus!.</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. </p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. Architecto quae molestiae reprehenderit, nobis facere odit eos, eligendi cum saepe, qui est voluptatibus!.</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. </p>

  <div 
    slot="dialog-footer" 
    class="contents"
  >
    <Button 
      onclick="myDialog.close()" 
      class="button"
    >
      Cancel
    </Button>
    <Button class="button">Save</Button>
  </div>
</Dialog>

<Dialog 
  id="myOtherDialog" 
  heading="My Dialog via show()"
  showHeader={false}
>
  <p>myOtherDialog via show()</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. Architecto quae molestiae reprehenderit, nobis facere odit eos, eligendi cum saepe, qui est voluptatibus!.</p>
  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quia, aperiam quod. </p>
  
  <div slot="dialog-footer" class="contents">
    <Button class="button">
      Clear
    </Button>
    <Button 
      onclick="myOtherDialog.close()" 
      classes="ml-auto">
      Cancel
    </Button>
    <Button class="button">
      Save
    </Button>
  </div>
</Dialog>

