---
import Layout from '@layouts/Layout.astro';
import Dialog from '@components/Dialog.astro';
import Button from '@components/Button.astro';
import Dropdown from '@components/Dropdown.astro';

const { 
	title = "My Astro Blog",
	description = "My musings about the Astro framework",
	...rest 
} = Astro.props;
---

<style>
  #my-dropdown { anchor-name: --my-anchor; }
  #my-menu {
  position-anchor: --my-anchor;
  position-area: bottom center;
}

[role="menuitem"] { width: 100%; justify-content: unset; }
</style>

<Layout {title} {description}>
  <main class="p-inline-max pt-lg bg-surface-2 stack">
    <p>Components</p>
    <h1>Popover</h1>
  
    <p>A minimally styled window overlaid on the main content. By design the Dialog is minimal with zero content to allow for both modal and non-modal use.</p>
    
    
    <Button 
      id="my-dropdown" 
      popovertarget="my-menu"
      aria-haspopup="menu"
      aria-controls="my-menu"
      aria-expanded="false"
      aria-label="Help menu"
    >
    ?
    </Button>

    <Dropdown id="my-menu" labelledBy="my-dropdown">
      <ul role="list" class="my-[0]">
        <li><Button role="menuitem">Profile</Button></li>
        <li><Button role="menuitem">Settings</Button></li>
        <li><Button role="menuitem">Log out</Button></li>
        <hr>
        <li><Button role="menuitem">Log out</Button></li>
      </ul>
    </Dropdown>
  </main>
</Layout>

<script is:inline>
  // Listen for *any* popover toggling:
  document.addEventListener('toggle', (e) => {
    const pop = /** @type {HTMLElement} */ (e.target);
    if (!pop.hasAttribute('popover') || !pop.id) return;

    // Find the matching control by its popovertarget:
    const btn = document.querySelector(
      `[popovertarget="${pop.id}"]`
    );
    if (btn) {
      btn.setAttribute(
        'aria-expanded',
        e.newState === 'open' ? 'true' : 'false'
      );
    }
  });
</script>