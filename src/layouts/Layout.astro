---
import type { HTMLAttributes } from 'astro/types';
import Head from '@layouts/Head.astro';
import TheHeader from '@layouts/TheHeader.astro';
import TheNavigation from '@layouts/TheNavigation.astro';

interface Props extends HTMLAttributes<"html"> {
	title: string;
	description: string;
}

const { 
	title = "My Astro Blog",
	description = "My musings about the Astro framework",
	...rest 
} = Astro.props;
---

<style>
	.grid { grid-template-columns: auto 1fr; }
</style>

<!doctype html>
<html lang="en">
	<Head {title} {description}/>
	<body id="app" class="grid">
		<TheHeader />
		<slot />
	</body>
	<!-- Global JS -->
	<script is:inline>
    document.querySelectorAll('button[popovertarget]').forEach(btn => {
      const menuId    = btn.getAttribute('popovertarget');
      const anchorVar = `--anchor-${menuId}`;
  
      // 1. tell the trigger where to anchor itself
      btn.style.setProperty('anchor-name', anchorVar);
  
      // 2. tell the popover where to position against
      const pop = document.getElementById(menuId);
      if (pop) {
        pop.style.setProperty('position-anchor', anchorVar);
        pop.style.setProperty('position-area', 'bottom center');
      }
  
      // 3. toggle aria-expanded on click (native)
      btn.addEventListener('click', () => {
        const isOpen = btn.getAttribute('aria-expanded') === 'true';
        btn.setAttribute('aria-expanded', String(!isOpen));
      });
  
      // 4. keep in sync if the polyfill fires a toggle event
      btn.addEventListener('toggle', e => {
        btn.setAttribute('aria-expanded', e.newState === 'open');
      });
    });
  </script>
</html>