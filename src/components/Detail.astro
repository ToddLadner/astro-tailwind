---
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"details"> {
  title: string;
  theme?: "outlined" | "tonal" | "filled" | "elevated";
  open?: boolean;
  name?: string;
  id?: string;
  classes?: string;
}

const {
  title,
  theme,
  open = false,
  name,
  id: idProp,
  classes = '',
  ...rest
} = Astro.props;

// generate a short, unique-ish ID if none provided
const id = idProp ?? `disclosure-${Math.random().toString(36).slice(2, 9)}`;
---

<style>
  @layer components {
    /* General Detail Styles */
    details {
      /* Props */
      --accordion-transition-time: 0.2s;
      --bg-color: transparent;
      --padding-inline: var(--spacing-sm);
      --shadow: none;
      
      background-color: var(--bg-color);
      box-shadow: var(--shadow);
      max-width: var(--measure-lg);
      border-radius: var(--radius-md);
      display: block;
      transition: 
        content-visibility, 
        opacity, 
        block-size 
        var(--accordion-transition-time) ease-out;
      
      /* Content Closed */
      &::details-content {
        block-size: 0;
        opacity: 0;
        overflow-y: clip;
        transition:
          content-visibility var(--accordion-transition-time) allow-discrete,
          opacity, block-size var(--accordion-transition-time) ease-out;
      }
      
      /* Content Open */
      &[open]::details-content {
        block-size: auto;
        opacity: 1;
      }
      
      /* Summary */
      & > summary {
        background-color: inherit;
        cursor: pointer;
        padding-block: var(--spacing-sm);
        user-select: none;
        background-color: inherit;
        color: 
      }

      /* Custom Arrow */
      summary {
        align-items: center;
        display: flex;
        justify-content: space-between;
        list-style: none;

        &::marker,
        &::-webkit-details-marker {
          display: none;
        }

        svg {
          transition: rotate 0.2s ease-out;
        }
      }
      /* Rotate Arrow */
      &[open] > summary svg {
        rotate: 180deg;
      }
      
      /* Content Container */
      & > .content {
        margin-block-start: 0;
        padding-block: var(--spacing-2xs) var(--spacing-sm);
      }

      /* Variants */
      &.text {
        --bg-color: transparent;
        --padding-inline: var(--size-1);
      }

      &.elevated {
        --bg-color: var(--color-surface-1);
        --padding-inline: 0;
        --shadow: var(--shadow-md);
      }

      &.outlined {
        --bg-color: var(--color-surface-2);
        --padding-inline: 0;
        border: 1px solid var(--color-surface-3);
      }

      &.tonal {
        --bg-color: var(--color-brand-0);
        --padding-inline: 0;
      }

      /* Inline padding for styles */
      &:is(.elevated, .outlined, .tonal) > * {
        padding-inline: var(--spacing-sm);
      }
    }
  }
</style>

<details 
 
  class:list={[theme, classes]}
  open={open}
  name={name} 
  {...rest}
>
  <summary 
    id={id}
    aria-controls={`${id}-content`}
    aria-expanded={open}
    class="font-bold"
  >
    {title} 
    <Icon name="chevron-down-solid" class="icon" />
  </summary>
  <div 
    id={`${id}-content`} 
    class="content stack stack-md"
    aria-labelledby={id}
    role="region" 
  >
    <slot />
  </div>
</details>