---
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';

type Element = 'input' | 'textarea' | 'select';

interface Props extends HTMLAttributes<any> {
  as?: Element;
  id?: string;
  uid?: string;
  label?: string;
  icon?: string;
  error?: string;
  classes?: string;
  options?: { value: string; label: string }[];
}

const {
  as = 'input',
  id: propId,
  uid,
  label,
  icon,
  error,
  classes = '',
  options = [],
  ...rest
} = Astro.props;

// now choose the ID in priority order:
const id = propId ?? uid ?? `field-${Math.random().toString(36).slice(2,8)}`;
---
<style>
  /* [1] Field */
  .field {
    background-color: var(--color-surface-0);
    max-width: var(--measure-sm);
    padding: var(--spacing-2xs);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-inset-lg);
    border: 1px solid var(--color-surface-3);

    &:focus-within {
      border: 1px solid var(--color-brand);
      box-shadow: 0px 0px 10px 4px oklch(from var(--color-brand) l c h / 23%);

      .label {
        color: var(--color-brand);
      }
    }
  }
  
  /* [2] Label */
  .label {}
  
  /* [3] Input */
  .control {
    background-color: transparent;
    width: 100%;
    font-size: var(--text-md);
    
    &:focus { outline: none; }
  }
  input::placeholder {
    color: var(--color-surface-4);
  }
  
  /* [4] Validation */
  label:has(input:user-valid) {
    color: var(--color-green-7);
    border: 1px solid var(--color-green-4);
    line-height: inherit;
  }
  label:has(input:user-invalid) {
    color: var(--color-red-7);
    border: 1px solid var(--color-red-7);
    line-height: inherit;
  }
  /* */
  textarea { resize: vertical; }
  /* * { border: 1px solid red; } */
</style>

<label for={id} class="field grid gap-3xs" class:list={[classes]}>
  {label && (
    <span class="label flex items-center gap-xs">
      {icon && <Icon name={icon} />}
      <span class="text-xs ">{label}</span>
    </span>
  )}

  {as === 'input' && (
    <input id={id} class="control" {...rest} />
  )}

  {as === 'textarea' && (
    <textarea id={id} class="control resize-y" {...rest} />
  )}

  {as === 'select' && (
    <select id={id} class="control" {...rest}>
      {options.map(o => <option value={o.value}>{o.label}</option>)}
    </select>
  )}

  {error && (
    <span id={`${id}-error`} class="mt-xs text-xs text-red-6">
      {error}
    </span>
  )}
</label>