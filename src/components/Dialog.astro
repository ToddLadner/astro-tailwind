---
import { Icon } from 'astro-icon/components';
import Card from '@components/Card.astro';
import Button from '@components/Button.astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"dialog"> {
  id?: string;
  role?: "alertdialog" | "dialog";
  showHeader?: boolean;
  heading: string;
  overline?: string;
  icon?: string;
  theme?: "outlined" | "tonal" | "filled" | "elevated";
  classes?: string;
}

const {
  id,
  role = 'dialog',
  showHeader = true,
  heading,
  overline,
  icon,
  theme,
  classes = '',
  ...rest
} = Astro.props;
---

<style>
  @layer components {
    dialog {
      --bg-color: var(--color-surface-1);
      --border-color: transparent;
      --border-width: 0;
      --shadow: var(--shadow-lg);

      display: grid;
      grid-template-rows: auto 1fr auto;
      max-height: 75dvh;
      border-radius: var(--radius-md);
      pointer-events: none;
      padding: 0;
      inset: 0;
      box-shadow: var(--shadow);
      width: min(100%, var(--measure-lg));
      overflow: hidden;
      max-width: none;
      
      &:not([open]) { display: none }

      &[open] { pointer-events: all }
      
      :is(header, .content, footer) { 
        padding-inline: var(--spacing-sm) 
      }
      :is(header, footer) { 
        padding-block: var(--spacing-sm); 
        background-color: var(--color-surface-2); 
      }
      .content {
        overflow-y: auto;
        padding-block: var(--spacing-md);
      }
    }

    html:has(dialog[open]) { overflow: hidden }
  }
</style>

<dialog
  id={id}
  role={role}
  class:list={[classes]}
  aria-modal="true"
  aria-describedby="dialog-content"
  {...(showHeader
    ? { 'aria-labelledby': 'dialog-heading' }
    : { 'aria-label': heading })
  }
  {...rest}
>
  <!-- Header | If showHeader is true -->
  {showHeader && (
    <header class="flex items-center gap-xs">
    <!-- Icon -->
    {icon && <Icon name={icon} class="icon" />}
    <!-- Heading -->
    <hgroup class="flex flex-col stack stack-3xs">
      {overline && <p class="text-xs">{overline}</p>}  
      <h2 id="dialog-heading" class="text-lg">{heading}</h2>
    </hgroup>
    <!-- Close Button -->
    <Button
      onclick="this.closest('dialog').close('close')"
      theme='filled' 
      variant='icon' 
      icon='xmark-large-solid' 
      aria-label='close dialog'
      classes="ml-[auto]"
    />
    </header>
  )}
  <!-- Content -->
  <article id="dialog-content" class="content stack stack-md">
    <slot/>
  </article>
  <!-- Footer -->
  <footer class="actions flex justify-end gap-xs">
    <slot name="dialog-footer" />
  </footer>
</dialog>

<script>
  import { createFocusTrap } from 'focus-trap';

  document.querySelectorAll('dialog').forEach(dialog => {
    // 1️⃣ Configure focus-trap to deactivate on outside click or Esc, then close the dialog
    const trap = createFocusTrap(dialog, {
      clickOutsideDeactivates: true,
      escapeDeactivates:       true,
      onDeactivate:            () => dialog.close(),  // light-dismiss via focus-trap  [oai_citation:3‡npm](https://www.npmjs.com/package/focus-trap?utm_source=chatgpt.com)
    });

    // 2️⃣ Backdrop click handler for native light-dismiss
    dialog.addEventListener('click', event => {
      if (event.target === dialog) dialog.close();     // close on backdrop click 
    });

    // 3️⃣ Cancel event for Esc key (native dialog API)
    dialog.addEventListener('cancel', () => dialog.close());  // Esc-to-close  [oai_citation:4‡MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event?utm_source=chatgpt.com)

    // 4️⃣ Observe 'open' attribute to activate/deactivate focus trap
    new MutationObserver(records => {
      for (const record of records) {
        if (record.attributeName === 'open') {
          dialog.hasAttribute('open') 
            ? trap.activate() 
            : trap.deactivate();
        }
      }
    }).observe(dialog, { attributes: true });            // watch only attributes  [oai_citation:5‡MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver?utm_source=chatgpt.com)
  });
</script>